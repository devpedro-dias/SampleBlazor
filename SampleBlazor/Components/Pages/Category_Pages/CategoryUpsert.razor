@page "/category/create"
@page "/category/update/{id:int}"
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _JS

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center h-100">
        Loading
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 d-flex justify-content-between align-items-center">
                    <h2 class="text-black py-2">@(Id>0?"Create" : "Update") Category</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Category" FormName="CategoryUpsertForm" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator />

                <div class="border p-3 mt-4">
                    <div class="form-floating pt-3 col-12">
                        <InputText @bind-Value="Category.Name" class="form-control" id="name" placeholder="Name" />
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(() => Category.Name)" />
                    </div>
                    <div class="row mt-3 justify-content-end">
                        <div class="col-6 col-md-3">
                            <a href="category" class="btn btn-secondary form-control" disabled="@isLoading">
                                <i class="bi bi-arrow-bar-left"></i>Back to List
                            </a>
                        </div>
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@isLoading">
                                <i class="bi bi-floppy"></i>Update
                            </button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Category Category { get; set; } = new Category();
    private bool isLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategory();
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategory()
    {
        if (Id > 0)
        {
            Category = await _categoryRepository.GetAsync(Id);
        }
    }

    private async Task UpsertCategory()
    {
        if (Category.Id == 0) { 
            await _categoryRepository.CreateAsync(Category);
            await _JS.ToastrSuccess("Category Created Succesfully"); 
        }

        else
        {
            await _categoryRepository.UpdateAsync(Category);
            await _JS.ToastrSuccess("Category Updated Succesfully");
        }

        isLoading = false;
        _navigationManager.NavigateTo("category");
    }
}
