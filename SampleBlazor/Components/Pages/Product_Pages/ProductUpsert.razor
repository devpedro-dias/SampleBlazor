@page "/product/create"
@page "/product/update/{id:int}"
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _JS
@inject IWebHostEnvironment _webHostEnviroment

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center h-100">
        Loading
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 d-flex justify-content-between align-items-center">
                    <h2 class="text-black py-2">@(Id > 0 ? "Update" : "Create") Category</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Product" FormName="CategoryUpsertForm" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />

                <div class="border p-3 mt-4">
                    <div class="form-floating pt-3 col-12">
                        <InputText @bind-Value="Product.Name" class="form-control" id="name" />
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(() => Product.Name)" />
                    </div>
                    <div class="form-floating pt-3 col-12">
                        <InputText @bind-Value="Product.Description" class="form-control" id="description" />
                        <label for="Description">Description</label>
                        <ValidationMessage For="@(() => Product.Description)" />
                    </div>
                    <div class="form-floating pt-3 col-12">
                        <InputNumber @bind-Value="Product.Price" class="form-control" id="price" placeholder="Price" />
                        <label for="Price">Price</label>
                        <ValidationMessage For="@(() => Product.Price)" />
                    </div>
                    <div class="form-floating pt-3 col-12">
                        <InputText @bind-Value="Product.SpecialTag" class="form-control" id="specialTag" />
                        <label for="specialTag">Special Tag</label>
                        <ValidationMessage For="@(() => Product.Price)" />
                    </div>
                    <div class="form-floating pt-3 col-12">
                        <InputSelect @bind-Value="Product.CategoryId" class="form-control" id="category" placeholder="Category">
                            <option value="0" disabled selected>--Select Category--</option>
                            
                            @foreach (var category in _categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <label for="category">Category</label>
                        <ValidationMessage For="@(() => Product.CategoryId)" />
                    </div>
                    @* <div class="form-floating pt-3 col-12">
                        @if(Product.ImageUrl == null) 
                        {
                            <InputFile OnChange="LoadFiles" class="form-control pb-3" id="customFile" accept="image/x-png,image/jpeg"></InputFile>
                            <label for="customFile">Upload Image</label>
                            <ValidationMessage For="@(() => Product.Price)" />
                        }
                        @if(Product.ImageUrl != null) 
                        {
                            <div class+"row">
                                <div class="col-3">
                                    <img src="@Product.ImageUrl" alt="image-from-product" class="img-thumbnail" />
                                </div>
                                <div class="col-md-9">
                                    <i class="bi bi-trash btn btn-outline-danger" @onclick="DeleteImage">Remove</i>
                                </div>
                            </div>
                        }
                    </div> *@
                    <div class="row mt-3 justify-content-end">
                        <div class="col-6 col-md-3">
                            <a href="category" class="btn btn-secondary form-control" disabled="@isLoading">
                                <i class="bi bi-arrow-bar-left m-1"></i>Back to List
                            </a>
                        </div>
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@isLoading">
                                <i class="bi bi-floppy m-1"></i>@(Id > 0 ? "Update" : "Create")
                            </button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product();
    private IEnumerable<Category> _categories = new List<Category>();
    private bool isLoading { get; set; } = true;
    // private string? directoryPath { get; set; }
    // protected override Task OnInitializedAsync()
    // {
    //     directoryPath = Path.Combine(_webHostEnviroment.WebRootPath, "images", "product");
    //     return base.OnInitializedAsync();
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductAndCategoryList();
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadProductAndCategoryList()
    {
        if (Id > 0)
        {
            Product = await _productRepository.GetAsync(Id);
        }
        _categories = await _categoryRepository.GetAllAsync();
    }

    private async Task UpsertProduct()
    {
        if (Product.Id == 0)
        {
            await _productRepository.CreateAsync(Product);
            await _JS.ToastrSuccess("Category Created Succesfully"); 
        }

        else
        {
            await _productRepository.UpdateAsync(Product);
            await _JS.ToastrSuccess("Category Updated Succesfully");
        }

        isLoading = false;
        _navigationManager.NavigateTo("product");
    }

    // private async Task LoadFiles(InputFileChangeEventArgs e)
    // {
    //     var file = e.File;
    //     System.IO.FileInfo fileInfo = new (file.Name);
    //     var newFileName = $"{Guid.NewGuid()}.{fileInfo.Extension}";
    //     if(!Directory.Exists(_directoryPath))
    //     {
    //         Directory.CreateDirectory(_directoryPath);
    //     }
    //     var path = Path.Combine(_directoryPath, newFileName);

    //     await using FileStream fileStream = new(path, FileMode.Create);
    //     await file.OpenReadStream(file.Size).CopyToAsync(fileStream);

    //     isLoading = false;
    // }

    // void DeleteImage()
    // {
    //     if(Product.ImageUrl == null) return;

    //     var fileToDelete = Product.IamgeUrl.Split('/').Reverse().First();
    //     var filePathToDeleteImage = Path.Combine(_directoryPath, fileToDelete);

    //     if (!File.Exists(filePathToDeleteImage)) 
    //     {
    //         Product.ImageUrl = null;
    //         return;
    //     };

    //     File.Delete(filePathToDeleteImage);

    //     Product.ImageUrl = null;
    //     return;
    // }
}
